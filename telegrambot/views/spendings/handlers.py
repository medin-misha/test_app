from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatAction
from keyboards import replays
from utils import (
    create_spending,
    delete_spendings,
    get_spending_by_id,
    put_spending_by_id,
)
from .states import CreateSpending, GetSpendings, DeleteSpendings
from .utils import valid_date, format_date, send_monthly_report

router = Router(name="spending_router")



@router.message(Command("createSpending"), StateFilter("*"))
async def create_spending_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)

    msg_split: list = msg.text.split()
    if len(msg_split) == 4:
        data: dict = {"date": msg_split[1], "money": msg_split[2], "name": msg_split[3]}
        spending = await create_spending(user_id=msg.chat.id, data=data)
        await msg.reply(
            text=f"–°–æ–∑–¥–∞–ª:\ndate: {spending.get('date')}\nmoney: {spending.get('money')}\nname: {spending.get('name')}"
        )
    else:
        await msg.reply(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–∞—Ç—ã:")
        await state.set_state(CreateSpending.name)


@router.message(Command("updateSpending"), StateFilter("*"))
async def update_spending_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    await send_monthly_report(msg=msg)
    await msg.reply(text="–°–∫–∏–Ω—å ID —Ç–æ–π –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å")
    await state.set_state(CreateSpending.id)


@router.message(Command("getSpendings"), StateFilter("*"))
async def get_spendings_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    await msg.reply(text="–•–æ—Ä–æ—à–æ. –û—Ç –∫–∞–∫–æ–π –¥–∞—Ç—ã –º–Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY.MM.DD)")
    await state.set_state(GetSpendings.up_date)


@router.message(Command("deleteSpending"), StateFilter("*"))
async def delete_spendings_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    await send_monthly_report(msg=msg)
    await msg.reply(text="–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –º–Ω–µ –Ω—É–∂–µ–Ω –µ—ë ID")
    await state.set_state(DeleteSpendings.get_id)

# create spending states
@router.message(CreateSpending.name, F.text)
async def get_name_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    name: str = msg.text
    await state.update_data(name=name)
    await msg.reply(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY.MM.DD): ")
    await state.set_state(CreateSpending.date)


@router.message(CreateSpending.date, F.text)
async def get_date_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    if valid_date(date=msg.text):
        await msg.reply(text="–û—Ç–ª–∏—á–Ω–æ, –≤–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞")
        await state.update_data(date=format_date(date=msg.text))
        await state.set_state(CreateSpending.money)
    else:
        await msg.reply(text="—Ç—ã —Å–∫–∏–Ω—É–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


@router.message(CreateSpending.money, F.text)
async def get_money_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    money: str = msg.text
    if msg.text.isdigit():
        states_data: dict = await state.get_data()
        data: dict = {
            "date": states_data.get("date"),
            "name": states_data.get("name"),
            "money": float(money),
        }
        spending: dict = await create_spending(user_id=str(msg.chat.id), data=data)

        await msg.reply(
            text=f"üí∞ *–ù–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\nüìÖ *–î–∞—Ç–∞:* {spending.get('date')}\nüíµ *–°—É–º–º–∞:* {spending.get('money')} UAH\nüõí *–∏–º—è:* {spending.get('name')}\nüÜî *ID:* {spending.get('id')}",
            reply_markup=replays.menu(),
        )
        await state.clear()
    else:
        await msg.reply(text="—Ç—ã —Å–∫–∏–Ω—É–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")


# Get Spendings
@router.message(GetSpendings.up_date, F.text)
async def get_up_date_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    if valid_date(date=msg.text):
        await msg.reply(text="–¢–µ–ø–µ—Ä—å –¥–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY.MM.DD)")
        await state.update_data(up_date=format_date(date=msg.text))
        await state.set_state(GetSpendings.to_date)
    else:
        await msg.reply(text="—Ç—ã —Å–∫–∏–Ω—É–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


@router.message(GetSpendings.to_date, F.text)
async def get_to_date_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    if valid_date(date=msg.text):
        await msg.reply(text="–ü–æ–¥–æ–∂–¥–∏...")
        await state.update_data(to_date=format_date(date=msg.text))
        data: dict = await state.get_data()
        await send_monthly_report(
            msg=msg, up_date=data.get("up_date"), to_date=data.get("to_date")
        )
        await msg.reply(text="–í–æ—Ç –æ—Ç—á—ë—Ç.", reply_markup=replays.menu())
        await state.clear()
    else:
        await msg.reply(text="—Ç—ã —Å–∫–∏–Ω—É–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


# depelete spending
@router.message(DeleteSpendings.get_id, F.text)
async def get_id_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    if not msg.text.isdigit():
        await msg.reply(text="–¢—ã –≤–≤—ë–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ.", reply_markup=replays.menu())
    else:
        response = await delete_spendings(user_id=msg.chat.id, spending_id=msg.text)
        await msg.reply(
            text="–∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞." if response else "—Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=replays.menu(),
        )
        await state.clear()


# update handlers
@router.message(CreateSpending.id, F.text)
async def update_get_spending_id_handler(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    if not msg.text.isdigit():
        await msg.reply(text="–¢—ã –≤–≤—ë–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ.", reply_markup=replays.menu())
    else:
        await state.update_data(id=msg.text)
        spending = await get_spending_by_id(user_id=msg.chat.id, spending_id=msg.text)
        await state.update_data(old_spending=spending)
        await msg.reply(
            text=f"üí∞ *—Ç—Ä–∞—Ç–∞*\n\nüìÖ *–î–∞—Ç–∞:* {spending.get('date')}\nüíµ *–°—É–º–º–∞:* {spending.get('money')} UAH\nüõí *–∏–º—è:* {spending.get('name')}\nüÜî *ID:* {spending.get('id')}",
            reply_markup=replays.menu(),
        )
        await msg.reply(
            text="–¢–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ —Ü–µ–Ω—ã. \n–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —á—Ç–æ —Ç–æ –æ–¥–Ω–æ –≤–≤–µ–¥–∏ –Ω–∞ –µ–≥–æ –º–µ—Å—Ç–µ `-`.\n–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ 20 –∏–ª–∏ - 20 –∏–ª–∏ –º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ -"
        )
        await state.set_state(CreateSpending.update)


@router.message(CreateSpending.update, F.text)
async def update_get_new_values(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(action=ChatAction.TYPING, chat_id=msg.chat.id)
    new_values = msg.text.split()
    if len(new_values) == 2:
        state_data: dict = await state.get_data()
        updated_spending_data: dict = {
            "name": state_data.get("old_spending").get("name")
            if new_values[0] == "-"
            else new_values[0],
            "money": state_data.get("old_spending").get("money")
            if new_values[1] == "-" or not new_values[1].isdigit()
            else new_values[1],
            "date": state_data.get("old_spending").get("date"),
        }
        response = await put_spending_by_id(
            user_id=msg.chat.id,
            spending_id=state_data.get("id"),
            new_spending=updated_spending_data,
        )
        if response.get("id"):
            await msg.reply(
                text=f"üí∞ *–ù–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\nüìÖ *–î–∞—Ç–∞:* {response.get('date')}\nüíµ *–°—É–º–º–∞:* {response.get('money')} UAH\nüõí *–∏–º—è:* {response.get('name')}\nüÜî *ID:* {response.get('id')}",
                reply_markup=replays.menu(),
            )
            await state.clear()
    else:
        await msg.reply(text="–¢—ã –≤–≤—ë–ª —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ.", reply_markup=replays.menu())


# error handler
@router.message()
async def error_get_id_view(msg: Message):
    await msg.bot.send_chat_action(chat_id=msg.chat.id, action=ChatAction.TYPING)
    await msg.reply(
        text="–°–ª—É—à–∞–π, –∫–æ–≥–¥–∞ —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å <i>–ø–æ–¥–æ–±–Ω—É—é —à—Ç—É–∫—É</i> —É –º–µ–Ω—è –≤ –º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã—Å–≤–µ—á–∏–≤–∞–µ—Ç—å—Å—è <code>None</code>. –Ø –Ω–µ –≤–¥—É–ø–ª—è—é —Å—Ç–∏–∫–µ—Ä—ã, —Å–º–∞–π–ª—ã, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. <b>–°–∫–∏–Ω—å —Ç–µ–∫—Å—Ç–æ–º.</b>",
    )
